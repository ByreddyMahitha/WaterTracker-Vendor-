{
    "collab_server" : "",
    "contents" : "library(shiny)\nset.seed(0402)\n\n# Define server logic required to draw a histogram\n\n\n\n  shinyServer(function(input,output,session)\n    {\n      output$myPlot<-renderPlot({\n        gen<-input$attribute\n        \n        if(gen=='Female'){\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Female,data=training)\n          \n        }\n        if(gen=='Age'){\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Age,data=training)\n          \n        }\n        if(gen=='RaceGrp')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Racegrp,data=training)\n          \n        }\n        if(gen=='Educ')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Educ,data=training)\n          \n        }\n        if(gen=='Unmarried')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Unmarried,data=training)\n          \n        }\n        if(gen=='Income')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Income,data=training)\n          \n        }\n        if(gen=='CareSource')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~CareSource,data=training)\n          \n        }\n        if(gen=='Insured')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Insured,data=training)\n          \n        }\n        if(gen=='Weight')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Weight,data=training)\n          \n        }\n        if(gen=='Height')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Height,data=training)\n          \n        }\n        if(gen=='BMI')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~BMI,data=training)\n          \n        }\n        if(gen=='Obese')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Obese,data=training)\n          \n        }\n        if(gen=='Waist')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Waist,data=training)\n          \n        }\n        if(gen=='SBP')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~SBP,data=training)\n          \n        }\n        if(gen=='DBP')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~DBP,data=training)\n          \n        }\n        if(gen=='HDL')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~HDL,data=training)\n          \n        }\n        if(gen=='LDL')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~LDL,data=training)\n          \n        }\n        if(gen=='Dyslipidemia')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Dyslipidemia,data=training)\n          \n        }\n        if(gen=='PVD')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~PVD,data=training)\n          \n        }\n        if(gen=='Activity')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Activity,data=training)\n          \n        }\n        if(gen=='PoorVision')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~PoorVision,data=training)\n          \n        }\n        if(gen=='Smoker')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Smoker,data=training)\n          \n        }\n        if(gen=='Hypertension')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Hypertension,data=training)\n          \n        }\n        if(gen=='Diabetes')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Diabetes,data=training)\n          \n        }\n        if(gen=='Stroke')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Stroke,data=training)\n          \n        }\n        if(gen=='CVD')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~CVD,data=training)\n          \n        }\n        if(gen=='CHF')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~CHF,data=training)\n          \n        }\n        if(gen=='Anaemia')\n        {\n          index <- createDataPartition(ModelDataFactored$CKD, p = 0.75, list = FALSE)\n          training <- ModelDataFactored[index,]\n          testing <- ModelDataFactored[-index,]\n          \n          randomVec <- naiveBayes(CKD~., data=training,laplace=1)\n          plot(CKD~Anemia,data=training)\n          \n        }\n       \n       \n      })\n      \n    }\n)",
    "created" : 1462256276586.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "842285525",
    "id" : "E6106A2C",
    "lastKnownWriteTime" : 1462259734,
    "last_content_update" : 1462259734815,
    "path" : "~/Desktop/CKD-Test-master/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}